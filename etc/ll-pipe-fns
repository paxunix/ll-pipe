setopt extendedglob


function absPath
{
    [[ ${1} == /* ]] && print -r -- ${1} && return 0
    print -r -- ${PWD}/${1}
}


function verbose
{
    setopt localoptions localtraps noxtrace noverbose 2>/dev/null
    enableDebug && setopt xtrace

    (( ll_pipe_verbose >= 1 )) && print -u3 -r -- '++' ${@}
}


function error
{
    setopt localoptions localtraps noxtrace noverbose 2>/dev/null
    enableDebug && setopt xtrace

    print -u2 -r -- '!!' ${@}
}


function enableDebug
{
    setopt localoptions noxtrace noverbose extendedglob 2>/dev/null

    [[ -n ${(M)${(zs(:))SH_DEBUG}:#(all|${${funcstack[2]:-${0}}:t})} ]]
}


function findTool
{
    setopt localoptions localtraps noxtrace noverbose 2>/dev/null
    enableDebug && setopt xtrace

    setopt extendedglob

    local -A opts
    zparseopts -D -K -A opts 'e:' 'x'

    local UNAME=${UNAME:-$(/bin/uname -s)}

    # Get name of tool to search for from list of tools for this platform,
    # followed by list of tools with no platform.  This breaks if any tool
    # has spaces in its name.
    local tool
    tool=( ${${(M)${(s(,))1}:#${UNAME}:*}#*:} ${(M)${(s(,))1}:#[^:]##} )
    tool=${tool[1]}

    if [[ -z ${tool} ]]
    then
        error "No tool specified for ${UNAME}."
        return 1
    fi

    shift

    # Pretty tool name variable can't have non-alphanumeric characters, so
    # replace any with an underscore.
    local prettyToolNameVar=${opts[-e]:-TOOL_${(U)tool//[^[:alnum:]]/_}}

    local toolPath=$( path=( ${(zs(:))@:-${path}} ); builtin whence -p ${tool} )

    if [[ -n ${toolPath} ]]
    then
        if (( ${+opts[-x]} ))
        then
            export ${prettyToolNameVar}
        fi

        eval ${prettyToolNameVar}=${toolPath}
        return 0
    fi

    # Couldn't find it; report error.
    error "failed to set ${prettyToolNameVar}:  couldn't find '${tool}'"

    return 1
}


findTool cat || return 1
findTool chmod || return 1
findTool ll-pipe-collect-by-suffix ${ll_pipe_dir} || return 1
findTool ll-pipe-worker ${ll_pipe_dir} || return 1
findTool mkdir || return 1
findTool mktemp || return 1
findTool mv || return 1
findTool perl || return 1
findTool rmdir || return 1
findTool rm || return 1
findTool sed || return 1
findTool sleep || return 1
findTool time || return 1
findTool ll-pipe-split ${ll_pipe_dir} || return 1
findTool xargs || return 1
findTool zsh || return 1


# Run GNU time with the given command+arguments and a preset format string,
# with additional optional keys+values appended to it.
# Arguments to --kv are "key value".
function timeCommand
{
    local isError
    local -a kv
    local -a output
    zparseopts -D -- "-kv+:=kv" "-output:=output"

    ${=TOOL_TIME} \
        --format '
---START
exitStatus:%x
realTime:%E
userTime:%U
systemTime:%S
cpuPercent:%P
maxRSS:%M
avgRSS:%t
avgMemUse:%K
numSwaps:%W
numPageFaults:%F
numInputs:%I
numOutputs:%O
numSignals:%k
numWaits:%w
numInvContextSwitches:%c
command:%C
'${(pj(\n))kv[@]:#--kv}'
---END' --output ${output[-1]} ${@}

    isError=${?}

    # XXX:  Work around bug in GNU time 1.7 where exit status is incorrect
    # if command was killed by signal.  Patch has been submitted to GNU time
    # maintainers.
    # http://github.com/paxunix/ll-pipe/issues#issue/1
    if [[ -e ${output[2]} ]]
    then
        ${=TOOL_SED} -i -e '/^exitStatus/s/ .*/ '${isError}'/' ${output[2]} ||
        isError=${?}
    fi

    return ${isError}
}


# vim: ft=zsh
