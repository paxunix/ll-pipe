#!/usr/bin/env zsh

# Intended for use by ll-pipe thus there is no error checking of any kind.

# Save exit status of the command.
function onExit
{
    print -r -- ${isError} > ${opts[--input-file]}.done
    return ${isError}
}


function getChunkCount
{
    local file=${opts[--input-file]:h}/chunk-count

    if [[ -e ${file} ]]
    then
        < ${file}
    else
        print -r -- '???'
    fi
}


# Main

. ${ll_pipe_dir}/../etc/ll-pipe-fns || return 1

enableDebug && setopt xtrace

local -A opts
zparseopts -D -A opts -- \
    "-input-file:" \
    "-max-attempts:" \
    "-retry-delay:" \
    "-retry-failure-fatal" \
    "-no-clean" \

# XXX:  messages should only be in verbose mode?

# Receives metadata about the processing.
local metaFile=${opts[--input-file]}.meta

local numAttempts=0
local isError=1     # Assume failure.
local gotSignal=0

trap 'isError=${?}; gotSignal=1; return ${isError}' INT HUP TERM USR1 USR2 QUIT ABRT
trap 'onExit' EXIT

# Try the command until it succeeds or runs out of retries.
local delay
while (( numAttempts < ${opts[--max-attempts]} && ! gotSignal ))
do
    numAttempts=$((numAttempts + 1))

    verbose "Executing command (chunk ${opts[--input-file]:t}/$(getChunkCount), attempt #${numAttempts}/${opts[--max-attempts]})"

    # Time the command to get stats about it.  stdout overwrites stdout from
    # any prior attempt.  stderr is accumulated across attempts.
    timeCommand \
        --kv "action:command" \
        --kv "numAttempts:${numAttempts}" \
        --kv "inputFile:${opts[--input-file]}" \
        --output ${metaFile} \
        -- \
        ${@} \
        < ${opts[--input-file]} \
        > ${opts[--input-file]}.out \
        2>> ${opts[--input-file]}.err

    isError=${?}

    if (( ! isError ))
    then
        verbose "Command succeeded (chunk ${opts[--input-file]:t}/$(getChunkCount), attempt #${numAttempts}/${opts[--max-attempts]})"

        # On success, delete the input file.
        if (( ! ${+opts[--no-clean]} ))
        then
            ${=TOOL_RM} -f ${opts[--input-file]}
        fi

        break
    fi

    verbose "Command failed (chunk ${opts[--input-file]:t}/$(getChunkCount), attempt #${numAttempts}/${opts[--max-attempts]})"

    delay=${(e)opts[--retry-delay]}
    (( delay != 0 )) &&
        ${=TOOL_SLEEP} ${delay}
done

if (( gotSignal ))
then
    verbose "Caught SIG${signals[isError+1]}; exiting"
    return ${isError}
fi

# If the command failed and failure is fatal, immediately return 255 so that
# the wrapper xargs kills its kids and exits.
if (( isError && ${+opts[--retry-failure-fatal]} ))
then
    verbose "Command failed ${opts[--max-attempts]} attempts (chunk ${opts[--input-file]:t}/$(getChunkCount)).  Aborting all workers."
    isError=255
fi

return ${isError}

# vim: ft=zsh
