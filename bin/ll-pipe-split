#!/usr/bin/env perl

use strict;

use File::Basename;
use Getopt::Long;
use IO::File;


sub usage()
{
    my $prog = basename($0);

    print(<<EOF);
NAME
    $prog
    
SYNOPSIS
    $prog [--lines-per-chunk num]
          [--directory dir]
          [file1 file2 ...]

DESCRIPTION
    Breaks stdin or the given files into files in the given director, each
    containing the given number of lines until all input is consumed.  Each
    create filename is output to stdout once content is written to it and it
    is closed.

OPTIONS
    --lines-per-chunk num
        The number of lines of input to write to each file "chunk".
        Defaults to 1000.

    --directory
        The directory to contain the split files.  Must already exist.
        Defaults to ".".

OPERANDS
    file1, file2, ...       Optional list of filenames used, in order, as
                            input.  If not given, input from stdin is
                            assumed.
EOF
}


sub closefile($$)
{
    my ($fileHandle, $fileName) = @_;

    if ($fileHandle)
    {
        $fileHandle->close();
        print("$fileName\n");
    }
}


# Main

my $linesPerChunk = 1000;
my $directory = ".";

GetOptions(
    "lines-per-chunk=i", \$linesPerChunk,
    "directory=s", \$directory,
) or (usage(), exit(1));

if (! -d $directory)
{
    die("--directory '$directory' must already exist.\n");
}

my $fileHandle;
my $fileName;
my $lineCount = 0;
my $fileCount = 1;

while (<>)
{
    if (!$fileHandle)
    {
        $fileName = "$directory/$fileCount";
        $fileHandle = new IO::File($fileName, ">") or
            die("Faile to open '$fileName' for write: $!\n");

        $fileCount++;
    }

    print($fileHandle $_);
    $lineCount++;

    if ($lineCount == $linesPerChunk)
    {
        closefile($fileHandle, $fileName);
        $fileHandle = undef;
        $lineCount = 0;
    }
}

closefile($fileHandle, $fileName);
